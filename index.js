const TelegramBot = require("node-telegram-bot-api");
const { Client } = require("@threadsjs/threads.js");
const token = "5988809850:AAGykNyaV9r7dYDa871Ivg-ERSnhZ9MGG9Q";
const webAppUrl = "https://musical-pasca-6a0bee.netlify.app/";
const bot = new TelegramBot(token, { polling: true });

let login = "";
let password = "";
let newMessage = "";
let newTimer = 0;
let timer = undefined;

const publishTimer = async (chatID) => {
    timer = setTimeout(async () => {
        const client = new Client({ token: "token" });
        await client.login(login, password);
        await client.posts.create(1, { contents: newMessage });

        newTimer = 0;
        console.log("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
        bot.sendMessage(chatID, "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ù–æ–≤—ã–π –ø–æ—Å—Ç",
                            callback_data: "newPost",
                        },
                    ],
                ],
            },
        });
    }, newTimer * 1000 * 60 * 60);
};

const clearTimer = (chatId) => {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é");
    clearTimeout(timer);
    bot.sendMessage(chatId, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: "–ù–æ–≤—ã–π –ø–æ—Å—Ç",
                        callback_data: "newPost",
                    },
                ],
            ],
        },
    });
};

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === "/start") {
        await bot.sendMessage(
            chatId,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ Threads –≤ –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –≤—Ä–µ–º—è ‚è∞ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ Threads, –∞ —è –≤—Å—ë —Å–¥–µ–ª–∞—é —Å–∞–º üòâ. –ù–æ –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–µ–º –ø—Ä–æ—Å—Ç—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —è –Ω–µ —Ö—Ä–∞–Ω—é —É —Å–µ–±—è, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø—Ä—è–º—É—é –≤ Meta üîê. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'",
            {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
                                web_app: { url: webAppUrl },
                            },
                        ],
                    ],
                    one_time_keyboard: true,
                },
            }
        );
    }

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            await bot.sendMessage(chatId, "–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Threads ‚è≥");
            login = data?.login;
            password = data?.password;

            await bot.sendMessage(
                chatId,
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ Threads! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –ø–æ—Å—Ç'",
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–ù–æ–≤—ã–π –ø–æ—Å—Ç",
                                    callback_data: "newPost",
                                },
                            ],
                        ],
                    },
                }
            );
        } catch (e) {
            await bot.sendMessage(
                chatId,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢ –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ! /start"
            );
        }
    }
});

bot.on("callback_query", (query) => {
    let id = query.message.chat.id;

    switch (query.data) {
        case "newPost":
            if (!login || !password) {
                bot.sendMessage(
                    id,
                    "–ù—É–∂–Ω–æ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑ \\/start"
                );
            }
            bot.sendMessage(
                id,
                "–ù–∞–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –ø–æ—Å—Ç–∞ üñä"
            );
            bot.addListener("message", (message) => {
                if (newMessage !== "") {
                    bot.removeAllListeners();
                    return;
                }

                newMessage = message.text;
                bot.sendMessage(
                    id,
                    "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ ‚è∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, 4"
                );
                bot.addListener("message", (message) => {
                    newTimer = Number(message.text);
                    bot.sendMessage(
                        id,
                        `–û—Ç–ª–∏—á–Ω–æ, —á–µ—Ä–µ–∑ ${newTimer.toFixed(
                            0
                        )} —á–∞—Å–æ–≤ —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ Threads!`,
                        {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                                            callback_data: "cancelPublish",
                                        },
                                    ],
                                ],
                                one_time_keyboard: true,
                            },
                        }
                    );
                    publishTimer(id);
                    bot.removeAllListeners();
                });
            });
            break;
        case "cancelPublish":
            clearTimer(id);
            break;
    }
});
